# 1 697
class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        mp = dict()

        for i, num in enumerate(nums):
            if num in mp:
                mp[num][0] += 1
                mp[num][2] = i
            else:
                mp[num] = [1, i, i]
        
        maxNum = minLen = 0
        for count, left, right in mp.values():
            if maxNum < count:
                maxNum = count
                minLen = right - left + 1
            elif maxNum == count:
                if minLen > (span := right - left + 1):
                    minLen = span
        
        return minLen

# 2 560
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        
        pre_sum = collections.defaultdict(int) 
        pre_sum[0] = 1  
        cur_pre_sum = 0
        res = 0
        for i in range(len(nums)):
            cur_pre_sum += nums[i]  
            green_sum = cur_pre_sum - k
            if green_sum in pre_sum:
                res += pre_sum[green_sum]
            pre_sum[cur_pre_sum] += 1
        return res
